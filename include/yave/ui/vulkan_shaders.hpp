//
// Copyright (c) 2019 mocabe (https://github.com/mocabe)
// Distributed under LGPLv3 License. See LICENSE for more details.
//

#pragma once

#include <cstdint>

namespace yave::ui {

  // // file: shader.frag
  //
  // #version 450 core
  //
  // layout(set=0, binding=0) uniform sampler2D image;
  //
  // layout(location = 0) in struct {
  //   vec4 color;
  //   vec2 uv;
  // } vertOut;
  //
  // layout(location = 0) out vec4 outColor;
  //
  // void main()
  // {
  //   outColor = vertOut.color * texture(image, vertOut.uv.st);
  // }
  constexpr uint32_t shader_frag_spv[] = {
    0x07230203, 0x00010000, 0x00080008, 0x0000001E, 0x00000000, 0x00020011,
    0x00000001, 0x0006000B, 0x00000001, 0x4C534C47, 0x6474732E, 0x3035342E,
    0x00000000, 0x0003000E, 0x00000000, 0x00000001, 0x0007000F, 0x00000004,
    0x00000004, 0x6E69616D, 0x00000000, 0x00000009, 0x0000000D, 0x00030010,
    0x00000004, 0x00000007, 0x00030003, 0x00000002, 0x000001C2, 0x00040005,
    0x00000004, 0x6E69616D, 0x00000000, 0x00050005, 0x00000009, 0x4374756F,
    0x726F6C6F, 0x00000000, 0x00030005, 0x0000000B, 0x00000000, 0x00050006,
    0x0000000B, 0x00000000, 0x6F6C6F63, 0x00000072, 0x00040006, 0x0000000B,
    0x00000001, 0x00007675, 0x00040005, 0x0000000D, 0x74726576, 0x0074754F,
    0x00040005, 0x00000016, 0x67616D69, 0x00000065, 0x00040047, 0x00000009,
    0x0000001E, 0x00000000, 0x00040047, 0x0000000D, 0x0000001E, 0x00000000,
    0x00040047, 0x00000016, 0x00000022, 0x00000000, 0x00040047, 0x00000016,
    0x00000021, 0x00000000, 0x00020013, 0x00000002, 0x00030021, 0x00000003,
    0x00000002, 0x00030016, 0x00000006, 0x00000020, 0x00040017, 0x00000007,
    0x00000006, 0x00000004, 0x00040020, 0x00000008, 0x00000003, 0x00000007,
    0x0004003B, 0x00000008, 0x00000009, 0x00000003, 0x00040017, 0x0000000A,
    0x00000006, 0x00000002, 0x0004001E, 0x0000000B, 0x00000007, 0x0000000A,
    0x00040020, 0x0000000C, 0x00000001, 0x0000000B, 0x0004003B, 0x0000000C,
    0x0000000D, 0x00000001, 0x00040015, 0x0000000E, 0x00000020, 0x00000001,
    0x0004002B, 0x0000000E, 0x0000000F, 0x00000000, 0x00040020, 0x00000010,
    0x00000001, 0x00000007, 0x00090019, 0x00000013, 0x00000006, 0x00000001,
    0x00000000, 0x00000000, 0x00000000, 0x00000001, 0x00000000, 0x0003001B,
    0x00000014, 0x00000013, 0x00040020, 0x00000015, 0x00000000, 0x00000014,
    0x0004003B, 0x00000015, 0x00000016, 0x00000000, 0x0004002B, 0x0000000E,
    0x00000018, 0x00000001, 0x00040020, 0x00000019, 0x00000001, 0x0000000A,
    0x00050036, 0x00000002, 0x00000004, 0x00000000, 0x00000003, 0x000200F8,
    0x00000005, 0x00050041, 0x00000010, 0x00000011, 0x0000000D, 0x0000000F,
    0x0004003D, 0x00000007, 0x00000012, 0x00000011, 0x0004003D, 0x00000014,
    0x00000017, 0x00000016, 0x00050041, 0x00000019, 0x0000001A, 0x0000000D,
    0x00000018, 0x0004003D, 0x0000000A, 0x0000001B, 0x0000001A, 0x00050057,
    0x00000007, 0x0000001C, 0x00000017, 0x0000001B, 0x00050085, 0x00000007,
    0x0000001D, 0x00000012, 0x0000001C, 0x0003003E, 0x00000009, 0x0000001D,
    0x000100FD, 0x00010038,
  };

  // // file: shader.vert
  //
  // #version 450 core
  // layout(location = 0) in vec2 vertPos;
  // layout(location = 1) in vec2 vertUV;
  // layout(location = 2) in vec4 vertColor;
  //
  // layout(push_constant) uniform PushConstant {
  //   vec2 translate;
  //   vec2 scale;
  // } pc;
  //
  // out gl_PerVertex {
  //   vec4 gl_Position;
  // };
  //
  // layout(location = 0) out struct {
  //   vec4 color;
  //   vec2 uv;
  // } fragIn;
  // void main()
  // {
  //   fragIn.color = vertColor;
  //   fragIn.uv    = vertUV;
  //   gl_Position  = vec4(vertPos * pc.scale + pc.translate, 0, 1);
  // }
  constexpr uint32_t shader_vert_spv[] = {
    0x07230203, 0x00010000, 0x00080008, 0x0000002E, 0x00000000, 0x00020011,
    0x00000001, 0x0006000B, 0x00000001, 0x4C534C47, 0x6474732E, 0x3035342E,
    0x00000000, 0x0003000E, 0x00000000, 0x00000001, 0x000A000F, 0x00000000,
    0x00000004, 0x6E69616D, 0x00000000, 0x0000000B, 0x0000000F, 0x00000015,
    0x0000001B, 0x0000001C, 0x00030003, 0x00000002, 0x000001C2, 0x00040005,
    0x00000004, 0x6E69616D, 0x00000000, 0x00030005, 0x00000009, 0x00000000,
    0x00050006, 0x00000009, 0x00000000, 0x6F6C6F63, 0x00000072, 0x00040006,
    0x00000009, 0x00000001, 0x00007675, 0x00040005, 0x0000000B, 0x67617266,
    0x00006E49, 0x00050005, 0x0000000F, 0x74726576, 0x6F6C6F43, 0x00000072,
    0x00040005, 0x00000015, 0x74726576, 0x00005655, 0x00060005, 0x00000019,
    0x505F6C67, 0x65567265, 0x78657472, 0x00000000, 0x00060006, 0x00000019,
    0x00000000, 0x505F6C67, 0x7469736F, 0x006E6F69, 0x00030005, 0x0000001B,
    0x00000000, 0x00040005, 0x0000001C, 0x74726576, 0x00736F50, 0x00060005,
    0x0000001E, 0x68737550, 0x736E6F43, 0x746E6174, 0x00000000, 0x00060006,
    0x0000001E, 0x00000000, 0x6E617274, 0x74616C73, 0x00000065, 0x00050006,
    0x0000001E, 0x00000001, 0x6C616373, 0x00000065, 0x00030005, 0x00000020,
    0x00006370, 0x00040047, 0x0000000B, 0x0000001E, 0x00000000, 0x00040047,
    0x0000000F, 0x0000001E, 0x00000002, 0x00040047, 0x00000015, 0x0000001E,
    0x00000001, 0x00050048, 0x00000019, 0x00000000, 0x0000000B, 0x00000000,
    0x00030047, 0x00000019, 0x00000002, 0x00040047, 0x0000001C, 0x0000001E,
    0x00000000, 0x00050048, 0x0000001E, 0x00000000, 0x00000023, 0x00000000,
    0x00050048, 0x0000001E, 0x00000001, 0x00000023, 0x00000008, 0x00030047,
    0x0000001E, 0x00000002, 0x00020013, 0x00000002, 0x00030021, 0x00000003,
    0x00000002, 0x00030016, 0x00000006, 0x00000020, 0x00040017, 0x00000007,
    0x00000006, 0x00000004, 0x00040017, 0x00000008, 0x00000006, 0x00000002,
    0x0004001E, 0x00000009, 0x00000007, 0x00000008, 0x00040020, 0x0000000A,
    0x00000003, 0x00000009, 0x0004003B, 0x0000000A, 0x0000000B, 0x00000003,
    0x00040015, 0x0000000C, 0x00000020, 0x00000001, 0x0004002B, 0x0000000C,
    0x0000000D, 0x00000000, 0x00040020, 0x0000000E, 0x00000001, 0x00000007,
    0x0004003B, 0x0000000E, 0x0000000F, 0x00000001, 0x00040020, 0x00000011,
    0x00000003, 0x00000007, 0x0004002B, 0x0000000C, 0x00000013, 0x00000001,
    0x00040020, 0x00000014, 0x00000001, 0x00000008, 0x0004003B, 0x00000014,
    0x00000015, 0x00000001, 0x00040020, 0x00000017, 0x00000003, 0x00000008,
    0x0003001E, 0x00000019, 0x00000007, 0x00040020, 0x0000001A, 0x00000003,
    0x00000019, 0x0004003B, 0x0000001A, 0x0000001B, 0x00000003, 0x0004003B,
    0x00000014, 0x0000001C, 0x00000001, 0x0004001E, 0x0000001E, 0x00000008,
    0x00000008, 0x00040020, 0x0000001F, 0x00000009, 0x0000001E, 0x0004003B,
    0x0000001F, 0x00000020, 0x00000009, 0x00040020, 0x00000021, 0x00000009,
    0x00000008, 0x0004002B, 0x00000006, 0x00000028, 0x00000000, 0x0004002B,
    0x00000006, 0x00000029, 0x3F800000, 0x00050036, 0x00000002, 0x00000004,
    0x00000000, 0x00000003, 0x000200F8, 0x00000005, 0x0004003D, 0x00000007,
    0x00000010, 0x0000000F, 0x00050041, 0x00000011, 0x00000012, 0x0000000B,
    0x0000000D, 0x0003003E, 0x00000012, 0x00000010, 0x0004003D, 0x00000008,
    0x00000016, 0x00000015, 0x00050041, 0x00000017, 0x00000018, 0x0000000B,
    0x00000013, 0x0003003E, 0x00000018, 0x00000016, 0x0004003D, 0x00000008,
    0x0000001D, 0x0000001C, 0x00050041, 0x00000021, 0x00000022, 0x00000020,
    0x00000013, 0x0004003D, 0x00000008, 0x00000023, 0x00000022, 0x00050085,
    0x00000008, 0x00000024, 0x0000001D, 0x00000023, 0x00050041, 0x00000021,
    0x00000025, 0x00000020, 0x0000000D, 0x0004003D, 0x00000008, 0x00000026,
    0x00000025, 0x00050081, 0x00000008, 0x00000027, 0x00000024, 0x00000026,
    0x00050051, 0x00000006, 0x0000002A, 0x00000027, 0x00000000, 0x00050051,
    0x00000006, 0x0000002B, 0x00000027, 0x00000001, 0x00070050, 0x00000007,
    0x0000002C, 0x0000002A, 0x0000002B, 0x00000028, 0x00000029, 0x00050041,
    0x00000011, 0x0000002D, 0x0000001B, 0x0000000D, 0x0003003E, 0x0000002D,
    0x0000002C, 0x000100FD, 0x00010038,
  };

} // namespace yave::ui